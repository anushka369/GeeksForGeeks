//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
#define MAX_HEIGHT 100000
#define MAX_SIZE 100000

// Tree Node
class Node 
{
    public:
        int data;
        Node* left;
        Node* right;
  
      Node(int val) 
      {
            data = val;
            left = right = NULL;
      }
};

// Function to Build Tree
Node* buildTree(string str) 
{
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
    {
        return NULL;
    }

    // Creating vector of strings from input string after spliting by space
    vector<string> ip;
    istringstream iss(str);
  
    for (string str; iss >> str;)
      {
          ip.push_back(str);
      }

    // Create the root of the tree
    Node* root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) 
    {
        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") 
        {
            // Create the left child for the current node
            currNode -> left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode -> left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
        {
            break;
        }
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") 
        {
            // Create the right child for the current node
            currNode -> right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode -> right);
        }
        i++;
    }
    return root;
}

// } Driver Code Ends

/*
Node is as follows
class Node 
{
    int data;
    Node *left;
    Node *right;

    Node(int val) 
    {
        data = val;
        left = right = NULL;
    }
};
*/

#include <unordered_set>

class Solution 
{
    public:
        bool findTarget(Node* root, int target) 
        {
            std::unordered_set<int> seen;
            return findPair(root, target, seen);
        }

    private:
        bool findPair(Node* node, int target, std::unordered_set<int>& seen) 
        {
            if (!node) 
            {
                return false; // Base case: if the node is null, return false
            }
            
            // Check the left subtree
            if (findPair(node -> left, target, seen)) 
            {
                return true;
            }
            
            // Check if the complement (target - node->data) exists in the set
            if (seen.count(target - node -> data)) 
            {
                return true; // Found the pair
            }
            
            // Add the current node's value to the set
            seen.insert(node -> data);
            
            // Check the right subtree
            return findPair(node -> right, target, seen);
        }
};

//{ Driver Code Starts.
int main() 
{
    int t;
    string tc;
    getline(cin, tc);
    t = stoi(tc);
  
    while (t--) 
    {
        string s;
        getline(cin, s);
        Node* root = buildTree(s);
        getline(cin, s);
        int k = stoi(s);
        Solution obj;
        cout << obj.findTarget(root, k) << endl;
        cout << "~" << "\n";
    }
    return 0;
}

// } Driver Code Ends

// Link to the problem: https://www.geeksforgeeks.org/problems/find-a-pair-with-given-target-in-bst/1/
